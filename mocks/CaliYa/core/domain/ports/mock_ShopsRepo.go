// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	dto "CaliYa/core/domain/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "CaliYa/core/domain/models"
)

// ShopsRepo is an autogenerated mock type for the ShopsRepo type
type ShopsRepo struct {
	mock.Mock
}

// GetAllShops provides a mock function with given fields: ctx
func (_m *ShopsRepo) GetAllShops(ctx context.Context) (dto.ShopsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllShops")
	}

	var r0 dto.ShopsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (dto.ShopsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) dto.ShopsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dto.ShopsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShopsBy provides a mock function with given fields: ctx, criteria
func (_m *ShopsRepo) GetShopsBy(ctx context.Context, criteria dto.SearchShopsByID) (*models.ProductsShops, error) {
	ret := _m.Called(ctx, criteria)

	if len(ret) == 0 {
		panic("no return value specified for GetShopsBy")
	}

	var r0 *models.ProductsShops
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.SearchShopsByID) (*models.ProductsShops, error)); ok {
		return rf(ctx, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.SearchShopsByID) *models.ProductsShops); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProductsShops)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.SearchShopsByID) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewShopsRepo creates a new instance of ShopsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShopsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShopsRepo {
	mock := &ShopsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
