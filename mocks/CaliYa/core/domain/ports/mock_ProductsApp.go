// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	models "CaliYa/core/domain/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ProductsApp is an autogenerated mock type for the ProductsApp type
type ProductsApp struct {
	mock.Mock
}

// GetAditionsByCategory provides a mock function with given fields: ctx, id
func (_m *ProductsApp) GetAditionsByCategory(ctx context.Context, id uuid.UUID) ([]models.Items, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAditionsByCategory")
	}

	var r0 []models.Items
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Items, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Items); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Items)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByCategory provides a mock function with given fields: ctx, category
func (_m *ProductsApp) GetProductByCategory(ctx context.Context, category string) ([]models.Items, error) {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByCategory")
	}

	var r0 []models.Items
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Items, error)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Items); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Items)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterProduct provides a mock function with given fields: ctx
func (_m *ProductsApp) RegisterProduct(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RegisterProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductsApp creates a new instance of ProductsApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductsApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductsApp {
	mock := &ProductsApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
